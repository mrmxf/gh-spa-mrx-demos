import { MrxExploreEnum, type MrxMediaSource, type MrxRegisterCache } from '$lib/inc/defs';

import rnc from '$lib/reg/MRX.123.456.789.rnc/register.json';
import rnf from '$lib/reg/MRX.123.456.789.rnf/register.json';
import rnj from '$lib/reg/MRX.123.456.789.rnj/register.json';
import rny from '$lib/reg/MRX.123.456.789.rny/register.json';

export const thisId = 4

//this is a cache of all the register entries that are needed for this demo
export const regCache: MrxRegisterCache = [
  { mrxId: "MRX.123.456.789.rnc", reg: rnc },
  { mrxId: "MRX.123.456.789.rnf", reg: rnf },
  { mrxId: "MRX.123.456.789.rnj", reg: rnj },
  { mrxId: "MRX.123.456.789.rny", reg: rny },
]

// serviceData[0] is for demo04
// serviceData[1] is for demo12
export const sources: MrxMediaSource[] = [
  {
    id: "Spring",
    mrxId: "MRX.123.456.789.rnc",
    name: "springwatch.csv",
    clip: "BBC Springwatch",
    srcUrl: "demo04/rnf-poster-springwatch.png",
    summary: "Springwatch human segmentation metadata",
    exploreMd: `
Our source data is generated by a human (Bruce) and is a simple \`csv\` file
exported from a spreadsheet. To use it with the AI data we have to
convert it to an arbitrary normalized format. We did this, specified it in the
MetaRex register and used automatic tools to convert the spreadsheets.

1. look at the metarex entry for the source \`csv\` file to figure out what to
parse,
2. look at the metarex entry for the normalized json mid point so that we know
the mid point format for the _make it all look the same_ database
3. Use the \`auto-etl\` feature to automatically transform the data`,
    srcReg: rnc,
    resReg: rnf,
    serviceData: [
      { type: MrxExploreEnum.Csv, id: "springwatch", reqUrl: "demo04/springwatch.csv", service: "MRX.123.456.789.rnf", vis: MrxExploreEnum.Text, mapping: true },
    ],
  }, {
    id: "Lost",
    mrxId: "MRX.123.456.789.rnc",
    name: "lostpast.csv",
    clip: "Raiders of the Lost Past",
    srcUrl: "demo04/rnf-poster-raidersofthelostpast.png",
    summary: "Lost Past human segmentation metadata",
    exploreMd: `
**CSV** source data converted to our normalized RNF json.

1. look at the metarex entry for the source data to figure out what to
parse,
2. look at the metarex entry for the normalized json mid point so that we know
the mid point format for the _make it all look the same_ database
3. Use the \`auto-etl\` feature to automatically transform the data`,
    srcReg: rnc,
    resReg: rnf,
    serviceData: [
      { type: MrxExploreEnum.Csv, id: "lostpast", reqUrl: "demo04/lostpast.csv", service: "MRX.123.456.789.rnf", vis: MrxExploreEnum.Json, mapping: true },
    ],
  }, {
    id: "Cosmos",
    mrxId: "MRX.123.456.789.rnj",
    name: "cosmos-laundromat.json",
    clip: "Cosmos Laundromat",
    srcUrl: "demo04/rnf-poster-cosmos.png",
    summary: "Cosmos AI segmentation metadata",
    exploreMd: `
**JSON** source data converted to our normalized RNF json.

1. look at the metarex entry for the source data to figure out what to
parse,
2. look at the metarex entry for the normalized json mid point so that we know
the mid point format for the _make it all look the same_ database
3. Use the \`auto-etl\` feature to automatically transform the data`,
    srcReg: rnj,
    resReg: rnf,
    serviceData: [
      { type: MrxExploreEnum.Json, id: "cosmos", reqUrl: "demo04/cosmos-laundromat.json", service: "MRX.123.456.789.rnf", vis: MrxExploreEnum.Text, mapping: true },
    ],
  }, {
    id: "IET",
    mrxId: "MRX.123.456.789.rny",
    name: "IET.yaml",
    clip: "IET Logie Baird Lecture",
    srcUrl: "logo/theIET-logo.svg",
    summary: "IET AI segmentation metadata",
    exploreMd: `
**JSON** source data converted to our normalized RNF json.

1. look at the metarex entry for the source data to figure out what to
parse,
2. look at the metarex entry for the normalized json mid point so that we know
the mid point format for the _make it all look the same_ database
3. Use the \`auto-etl\` feature to automatically transform the data`,
    srcReg: rnj,
    resReg: rnf,
    serviceData: [
      { type: MrxExploreEnum.Json, id: "cosmos", reqUrl: "demo04/IET.yaml", service: "MRX.123.456.789.rnf", vis: MrxExploreEnum.Yaml, mapping: "true" },
      { type: MrxExploreEnum.Text, id: "springwatch", reqUrl: "demo12/IET_out.txt", service: "generateFFmpeg", vis: MrxExploreEnum.Text},

      // {
      //   id: "IET",
      //   mrxId: "MRX.123.456.789.rny",
      //   name: "IET.yaml",
      //   clip: "",
      //   srcUrl: "demo04/IET.yaml",
      //   summary: "",
      //   srcReg: "yaml",
      //   serviceData: [],
      // },

    ],
  }]
